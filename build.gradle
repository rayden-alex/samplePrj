buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    // Gradle-apt-plugin
    // id 'net.ltgt.apt' version '0.18'

    // https://habrahabr.ru/post/345520/
    // https://github.com/tbroyer/gradle-apt-plugin
    // https://github.com/tbroyer/gradle-apt-plugin/issues/87
    // with Gradle 4.9 (and 4.8, back to 4.6), it basically only configures the options.annotationProcessorGeneratedSourcesDirectory
    // of the JavaCompile tasks (it also adds the various DSLs, and the legacy apt configurations),
    // as everything required (annotationProcessor configurations, etc.) is provided by Gradle proper.
    // If you don't use the plugin's DSL, try removing the plugin and run your build again;
    // the only difference would be that no generated source is written to disk.

    // JMH Gradle Plugin
    // id 'me.champeau.gradle.jmh' version '0.4.7'  //https://github.com/melix/jmh-gradle-plugin
}

group 'samples'
version '1.0-SNAPSHOT'


apply plugin: 'java'
apply plugin: 'idea'

apply plugin: 'war'


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

war {
    baseName = 'gs-rest'
    version = ''
}


repositories {
    jcenter()
    // mavenCentral()
}


ext {
    //junit4Version = '+'
    junitVintageVersion = '5.2.+'
    junitPlatformVersion = '1.2.+'
    junitJupiterVersion = '5.2.+'

    log4jVersion = '2.9.0'
    springVersion = '5.0.8.RELEASE'
    springSecurityVersion = '5.0.7.RELEASE'
    springDataJPAVersion = '2.0.9.RELEASE'
    hibernateVersion = '5.3.3.Final'
}

configurations.all {
    // Убирает зависимость Spring от commons-logging
    exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.+'
    testCompileOnly 'org.projectlombok:lombok:1.+'
    annotationProcessor 'org.projectlombok:lombok:1.+'
    testAnnotationProcessor 'org.projectlombok:lombok:1.+'


    implementation "org.springframework:spring-context:${springVersion}"
    implementation "org.springframework:spring-orm:${springVersion}"
    implementation "org.springframework.data:spring-data-jpa:${springDataJPAVersion}"
    implementation "org.springframework:spring-webmvc:${springVersion}"
    //compile "org.springframework.boot:spring-boot-actuator:1.5.14.RELEASE"
    implementation "org.springframework.security:spring-security-web:${springSecurityVersion}"
    implementation "org.springframework.security:spring-security-config:${springSecurityVersion}"


    implementation("org.hibernate:hibernate-core:${hibernateVersion}")
    // compile("org.hibernate:hibernate-java8:${hibernateVersion}") // С версии 5.2 включено в core


    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.+'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.+'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.+'
    // for REST produces
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.+'


    providedCompile group: 'org.apache.tomcat', name: 'tomcat-jdbc', version: '8.5.23'
    providedCompile group: 'org.apache.tomcat', name: 'tomcat-dbcp', version: '8.5.23'

    // -----------------  Database ------------------
    // provided, т.к. оба файла все равно закинуты в Tomcat/lib
    providedCompile(group: 'org.firebirdsql.jdbc', name: 'jaybird-jdk18', version: '3.+')
    //providedCompile group: 'javax.resource', name: 'connector-api', version: '1.5'


    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.+'

    // It is not necessary nor recommended to add JSR 305 dependency in project classpath
    // to take advantage of Spring null-safe API. Only projects like Spring-based libraries
    // using null-safety annotations in their codebase should add com.google.code.findbugs:jsr305:3.0.2
    // with compileOnly Gradle configuration or Maven provided scope to avoid compile warnings.
    //    compile 'com.google.code.findbugs:jsr305:3.0.2'

    // ---------------   Logging -------------------
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.+'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.+'

    // ---------------  Testing --------------------
    testImplementation "org.springframework:spring-test:${springVersion}"
    testImplementation group: 'com.github.springtestdbunit', name: 'spring-test-dbunit', version: '1.+'
    testImplementation group: 'com.jayway.jsonpath', name: 'json-path', version: '2.+'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '1.+'

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.+'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '2.+'
    testImplementation(group: 'org.dbunit', name: 'dbunit', version: '+') {
        exclude group: 'junit'
    }

    // JUnit Jupiter API and TestEngine implementation
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    // To avoid compiler warnings about @API annotations in JUnit code
    // testCompileOnly('org.apiguardian:apiguardian-api:1.0.+')

    // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")

    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.+'
    //testCompile 'org.assertj:assertj-db:1.2.0'

    // ========== JMH micro-benchmarking framework ====================
    // jmh 'org.openjdk.jmh:jmh-core:1.21'
    // jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
}



test {
    // https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html

    // enable JUnit Platform (a.k.a. JUnit 5) support
    useJUnitPlatform {
        // excludeTags 'slow'
        includeEngines 'junit-jupiter'
        excludeEngines 'junit-vintage'

    }

    // set a system property for the test JVM(s)
    // systemProperty 'someProp', 'someValue'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // Fail the 'test' task on the first test failure
    failFast = false

    // explicitly include or exclude tests
    // include 'org/foo/**'
    // exclude 'org/boo/**'

    // listen to events in the test execution lifecycle
    beforeTest { TestDescriptor desc ->
        logger.lifecycle('\n\n\n===================Running test: {}', desc)
    }

    testLogging {
        events 'passed', 'skipped', 'failed'
    }

    afterSuite { TestDescriptor desc, TestResult result ->
        if (!desc.parent) { // will match the outermost suite
            logger.lifecycle('\n\n\n===================Test summary: {} (\n{} tests total, \n{} successes, \n{} failures, \n{} skipped)',
                    result.resultType, result.testCount, result.successfulTestCount, result.failedTestCount, result.skippedTestCount)
        }
    }
}

//build {
//    doFirst {
//        logger.quiet('Gradle version: {}   buildTime: {}', GradleVersion.current().toString(), GradleVersion.current().getBuildTime())
//    }
//}
//
//clean {
//    doFirst {
//        logger.quiet('Gradle version: {}   buildTime: {}', GradleVersion.current().toString(), GradleVersion.current().getBuildTime())
//    }
//
//}

//jmh {
//    includeTests = false // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
//    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE // Strategy to apply when encountering duplicate classes during creation of the fat jar (i.e. while executing jmhJar task)
//
//    fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
//    iterations = 3 // Number of measurement iterations to do.
//    warmupIterations = 3 // Number of warmup iterations to do.
//
//    jmhVersion = '1.21' // Specifies JMH version
//}

//task deleteEmptyBmList(type: Delete) {
//    delete "$buildDir/jmh-generated-classes/META-INF/BenchmarkList"
//}
//jmhCompileGeneratedClasses.finalizedBy deleteEmptyBmList



