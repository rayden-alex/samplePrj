//buildscript {
//    repositories {
//        jcenter()
//    }
//}
//
//plugins {
//    // Gradle-apt-plugin
//     id 'net.ltgt.apt-idea' version '0.19'
//
//    // https://habrahabr.ru/post/345520/
//    // https://github.com/tbroyer/gradle-apt-plugin
//    // https://github.com/tbroyer/gradle-apt-plugin/issues/87
//    // with Gradle 4.9 (and 4.8, back to 4.6), it basically only configures the options.annotationProcessorGeneratedSourcesDirectory
//    // of the JavaCompile tasks (it also adds the various DSLs, and the legacy apt configurations),
//    // as everything required (annotationProcessor configurations, etc.) is provided by Gradle proper.
//    // If you don't use the plugin's DSL, try removing the plugin and run your build again;
//    // the only difference would be that no generated source is written to disk.
//
//    // JMH Gradle Plugin
//    // id 'me.champeau.gradle.jmh' version '0.4.7'  //https://github.com/melix/jmh-gradle-plugin
//}

group 'samples'
version '1.0-SNAPSHOT'


apply plugin: 'java'
apply plugin: 'idea'

//apply plugin: 'net.ltgt.apt-idea'

apply plugin: 'war'


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

war {
    baseName = 'gs-rest'
    version = ''
}


repositories {
    jcenter()
    // mavenCentral()
}


ext {
    junitVintageVersion = '5.3.+'
    junitPlatformVersion = '1.3.+'
    junitJupiterVersion = '5.3.+'

    springVersion = '5.1.2.RELEASE'
    springSecurityVersion = '5.1.1.RELEASE'
    springDataJPAVersion = '2.1.2.RELEASE'

    hibernateVersion = '5.3.7.Final'

    mapStructVersion = "1.3.0.Beta2"
}

configurations.all {
    // Убирает зависимость Spring от commons-logging
    exclude group: 'commons-logging', module: 'commons-logging'
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.+'
    testCompileOnly 'org.projectlombok:lombok:1.+'
    annotationProcessor 'org.projectlombok:lombok:1.+'
    testAnnotationProcessor 'org.projectlombok:lombok:1.+'


    // "compile" needed! With "compileOnly" Gradle-Test failed with "ClassNotFoundException: org.mapstruct.factory.Mappers"
    // (хотя тесты из идейки проходят нормально, хм...)
    // "testCompile" and "testAnnotationProcessor" needed ONLY when CREATE "Mappers" in "test" module.
    // They are NOT NEEDED when only use already created Mapper classes in "main" module
    compile "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"


    implementation "org.springframework:spring-context:${springVersion}"
    implementation "org.springframework:spring-orm:${springVersion}"
    implementation "org.springframework.data:spring-data-jpa:${springDataJPAVersion}"
    implementation "org.springframework:spring-webmvc:${springVersion}"
    //compile "org.springframework.boot:spring-boot-actuator:1.5.14.RELEASE"
    implementation "org.springframework.security:spring-security-web:${springSecurityVersion}"
    implementation "org.springframework.security:spring-security-config:${springSecurityVersion}"


    implementation 'org.thymeleaf:thymeleaf:3.0.+'
    implementation 'org.thymeleaf:thymeleaf-spring5:3.0.+'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.+'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.+'

    implementation "org.hibernate:hibernate-core:${hibernateVersion}"

    // https://github.com/marschall/hibernate-batch-sequence-generator
    implementation 'com.github.marschall:hibernate-batch-sequence-generator:1.+'

    // compile("org.hibernate:hibernate-java8:${hibernateVersion}") // С версии 5.2 включено в core

    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.+'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.+'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.+'
    // for REST produces
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.+'


    providedCompile 'org.apache.tomcat:tomcat-jdbc:8.5.34'
    providedCompile 'org.apache.tomcat:tomcat-dbcp:8.5.34'

    // -----------------  Database ------------------
    // provided, т.к. оба файла все равно закинуты в Tomcat/lib
    providedCompile 'org.firebirdsql.jdbc:jaybird-jdk18:3.+'
    //providedCompile 'javax.resource:connector-api:1.5'


    providedCompile 'javax.servlet:javax.servlet-api:3.+'

    // It is not necessary nor recommended to add JSR 305 dependency in project classpath
    // to take advantage of Spring null-safe API. Only projects like Spring-based libraries
    // using null-safety annotations in their codebase should add com.google.code.findbugs:jsr305:3.0.2
    // with compileOnly Gradle configuration or Maven provided scope to avoid compile warnings.
    //    compile 'com.google.code.findbugs:jsr305:3.0.2'

    // ---------------   Logging -------------------
    implementation 'org.slf4j:slf4j-api:1.7.+'
    implementation 'ch.qos.logback:logback-classic:1.2.+'

    // ---------------  Testing --------------------
    testImplementation "org.springframework:spring-test:${springVersion}"
    testImplementation "org.springframework.security:spring-security-test:${springSecurityVersion}"

    testImplementation 'com.github.springtestdbunit:spring-test-dbunit:1.+'
    testImplementation 'com.jayway.jsonpath:json-path:2.+'
    testImplementation 'org.hamcrest:hamcrest-library:1.+'

    testImplementation 'org.mockito:mockito-core:2.+'
    testImplementation 'org.mockito:mockito-junit-jupiter:2.+'
    testImplementation('org.dbunit:dbunit:+') {
        exclude group: 'junit'
    }

    testImplementation 'org.thymeleaf:thymeleaf-testing:3.0.+'

    // JUnit Jupiter API and TestEngine implementation
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"

    // To avoid compiler warnings about @API annotations in JUnit code
    // testCompileOnly('org.apiguardian:apiguardian-api:1.0.+')

    // Only needed to run tests in an (IntelliJ) IDE(A) that bundles an older version
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"

    testImplementation 'org.assertj:assertj-core:3.+'
    //testCompile 'org.assertj:assertj-db:1.2.0'

    // https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-testing.html
    testImplementation 'org.springframework.boot:spring-boot-test:+'

    // ========== JMH micro-benchmarking framework ====================
    // jmh 'org.openjdk.jmh:jmh-core:1.21'
    // jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
}


test {
    // https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html

    // enable JUnit Platform (a.k.a. JUnit 5) support
    useJUnitPlatform {
        // excludeTags 'slow'
        includeEngines 'junit-jupiter'
        excludeEngines 'junit-vintage'

    }

    // set a system property for the test JVM(s)
    // systemProperty 'someProp', 'someValue'

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // Fail the 'test' task on the first test failure
    failFast = false

    // explicitly include or exclude tests
    // include 'org/foo/**'
    // exclude 'org/boo/**'

    // listen to events in the test execution lifecycle
    beforeTest { TestDescriptor desc ->
        logger.lifecycle('\n\n\n===================Running test: {}', desc)
    }

    testLogging {
        events 'passed', 'skipped', 'failed'
    }

    afterSuite { TestDescriptor desc, TestResult result ->
        if (!desc.parent) { // will match the outermost suite
            logger.lifecycle('\n\n\n===================Test summary: {} (\n{} tests total, \n{} successes, \n{} failures, \n{} skipped)',
                    result.resultType, result.testCount, result.successfulTestCount, result.failedTestCount, result.skippedTestCount)
        }
    }
}

//build {
//    doFirst {
//        logger.quiet('Gradle version: {}   buildTime: {}', GradleVersion.current().toString(), GradleVersion.current().getBuildTime())
//    }
//}
//
//clean {
//    doFirst {
//        logger.quiet('Gradle version: {}   buildTime: {}', GradleVersion.current().toString(), GradleVersion.current().getBuildTime())
//    }
//
//}

//jmh {
//    includeTests = false // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
//    duplicateClassesStrategy = DuplicatesStrategy.EXCLUDE // Strategy to apply when encountering duplicate classes during creation of the fat jar (i.e. while executing jmhJar task)
//
//    fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
//    iterations = 3 // Number of measurement iterations to do.
//    warmupIterations = 3 // Number of warmup iterations to do.
//
//    jmhVersion = '1.21' // Specifies JMH version
//}

//task deleteEmptyBmList(type: Delete) {
//    delete "$buildDir/jmh-generated-classes/META-INF/BenchmarkList"
//}
//jmhCompileGeneratedClasses.finalizedBy deleteEmptyBmList

compileJava {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true',
            '-Amapstruct.suppressGeneratorVersionInfoComment=true'
    ]


//    // https://github.com/gradle/gradle/issues/4956
//    // https://youtrack.jetbrains.com/issue/IDEA-182577
//    // https://github.com/tbroyer/gradle-apt-plugin#do-without-the-plugin
//
//    String relativePath = "build/generated/source/apt/main"
//    sourceSets.main.java { srcDir relativePath }
//    File generatedSourceDir = project.file("build/generated/source/apt/main")
//    println "Creating and configuring generated source directory $generatedSourceDir"
//    project.mkdir(generatedSourceDir)
//    options.annotationProcessorGeneratedSourcesDirectory = generatedSourceDir
//    outputs.dir(generatedSourceDir)
//
//    doFirst {
//        // force a clean of generatedSourceDir to prevent java.lang.IllegalStateException: endPosTable already set.
//        // This shouldn't be need if using Gradle 4.8+ or Java 9+.
//        project.delete(generatedSourceDir)
//        project.mkdir(generatedSourceDir)
//    }
}


